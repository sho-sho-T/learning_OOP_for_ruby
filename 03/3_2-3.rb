# インスタンス変数の作成を分離する

# ex.3
# 脆い外部メッセージを隔離する

# 外部的な依存を取り除き、専用のメソッド内にカプセル化する
# ↑「メッセージ」への参照がクラスに埋め込まれていて、さらに、そのメッセージが変わる可能性が高い時に必要なテクニック
class Gear
  attr_reader :chainring, :cog, :rim, :tire

  def initialize(chainring, cog, rim, tire)
    @chainring = chainring
    @cog = cog
    @rim = rim
    @tire = tire
  end

  def gear_inches
    # ...恐ろしい計算が何行かある
    foo = some_intermediate_result * diameter
    # ...恐ろしい計算がさらに何行かある
  end

  def wheel
    @wheel ||= Wheel.new(rim, tire)
  end

  # 外部的な依存を取り除き、専用のメソッド内にカプセル化する。
  def diameter
    wheel.diameter
  end
end

# -------------------- オブジェクト指向設計ポイント -----------------------
# 1. 依存関係の隔離: diameterメソッドを介して外部依存（Wheel）を隔離。
#    これにより、Wheelクラスの変更がGearクラス全体に影響を与えるリスクを軽減。

# 2. カプセル化の向上: wheel.diameterの呼び出しをdiameterメソッドに
#    カプセル化。これにより、内部実装の変更が容易に。

# 3. 単一責任の原則: wheelメソッドがWheelオブジェクトの作成と
#    キャッシュを担当。これにより責任が明確に分離。

# 4. 遅延初期化: wheelメソッドで@wheelインスタンス変数を
#    遅延初期化。必要になるまでWheelオブジェクトの作成を延期。

# 5. 依存性の注入の準備: 将来的に外部からWheelオブジェクトを
#    注入できるよう、wheelメソッドを介して依存関係を管理。

# 6. インターフェースの安定性: diameterメソッドにより、
#    Wheelオブジェクトの内部構造変更からGearクラスを保護。

# 7. テスト容易性の向上: diameterメソッドをオーバーライドすることで、
#    Wheelクラスに依存せずにGearクラスのテストが可能に。

# 8. 変更の局所化: Wheelクラスのインターフェースが変更された場合、
#    修正はdiameterメソッド内に限定される。

# 9. 段階的なリファクタリング: この設計は、完全な依存性の注入への
#    中間段階として適している。将来的な改善の余地を残しつつ、
#    現在の依存関係を管理。

# この設計は前例よりも依存関係をより適切に管理し、変更に強い構造を実現。
# ただし、GearクラスがまだWheelクラスの存在を知っている点で、
# 完全な分離には至っていない。将来的には依存性の注入を
# さらに進めることで、より柔軟な設計が可能。
# --------------------------------------------------------------------
