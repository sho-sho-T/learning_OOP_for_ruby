# 依存関係を理解する。

class Gear
    attr_reader :chainring, :cog, :rim, :tire
    def initialize(chainring, cog, rim, tire)
        @chainring = chainring
        @cog = cog
        @rim = rim
        @tire = tire
    end
    
    def gear_inches
        ratio * Wheel.new(rim, tire).diameter # Wheelに依存している（Wheelクラスの名前変更などあった場合にめんどくさい）
    end
        
    # .....
end

# -------------------- オブジェクト指向設計ポイント -----------------------
# 1. 強い結合: gear_inchesメソッド内でWheelクラスを直接インスタンス化。
#    これにより、GearクラスとWheelクラスが強く結合。

# 2. 依存性の問題: Wheelクラスの名前や構造が変更された場合、
#    Gearクラスも修正が必要。これは保守性を低下させる。

# 3. 単一責任の原則違反: GearクラスがWheelの作成も担当。
#    これは責任の範囲を越えている可能性がある。

# 4. テストの難しさ: Wheelクラスへの依存により、Gearクラスの
#    単体テストが困難。モックやスタブの使用が必要になる。

# 5. 再利用性の低下: GearクラスがWheelクラスに強く依存しているため、
#    異なる文脈での再利用が難しい。

# 6. 柔軟性の欠如: 異なる種類の「車輪」を使用したい場合、
#    現在の設計では対応が困難。

# 7. 変更の影響範囲: Wheelクラスの変更がGearクラスに
#    直接影響を与える。これは変更に弱い設計。

# 改善案:
# - 依存性注入: Wheelオブジェクトを外部から注入する。
# - インターフェースの導入: 具体的なWheelクラスではなく、
#   抽象的なインターフェースに依存するよう変更。
# - Factory方式: Wheelの作成を専門のFactoryクラスに委譲。
# - 遅延初期化: Wheelオブジェクトの作成を必要になるまで遅延させる。

# これらの改善により、クラス間の結合度を下げ、
# テスタビリティ、再利用性、保守性を向上させることが可能。
# --------------------------------------------------------------------